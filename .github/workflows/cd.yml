# .github/workflows/cd.yml
name: CD EventHub

on:
  # Este workflow se ejecutará automáticamente cuando el workflow "CI EventHub"
  # (ubicado en .github/workflows/ci.yml) se complete en la rama 'main'.
  workflow_run:
    workflows: ["CI EventHub"] # Asegúrate que este sea el nombre exacto de tu workflow de CI
    types:
      - completed # Se dispara cuando el CI workflow termina, sea exitoso o no
    branches:
      - main # Solo nos interesa la ejecución de CI en la rama principal

jobs:
  deploy:
    # Este job solo se ejecutará si el workflow de CI que lo disparó fue exitoso.
    # Si las pruebas de CI fallan, el despliegue no se intentará.
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          # Obtenemos el SHA del commit del workflow de CI que disparó este CD.
          # Esto asegura que la imagen se asocie con el commit que fue validado por CI.
          # github.event.workflow_run.head_sha contiene el SHA del commit del workflow disparador.
          COMMIT_SHA=${{ github.event.workflow_run.head_sha }}
          IMAGE_NAME=augustocheca/eventhub
          
          # Construimos la imagen usando el SHA del commit como tag.
          # Esto crea una imagen inmutable para cada despliegue.
          echo "Building Docker image with tag: ${IMAGE_NAME}:${COMMIT_SHA}"
          docker build -t ${IMAGE_NAME}:${COMMIT_SHA} .
          docker push ${IMAGE_NAME}:${COMMIT_SHA}

          # Opcional: También tageamos la imagen como 'latest' y la pusheamos.
          # Esto es útil si tu servicio en Render está configurado para jalar siempre la imagen 'latest'
          # de Docker Hub para sus auto-deploys.
          echo "Tagging and pushing Docker image as 'latest'"
          docker tag ${IMAGE_NAME}:${COMMIT_SHA} ${IMAGE_NAME}:latest
          docker push ${IMAGE_NAME}:latest

      - name: Deploy to Render
        uses: render-examples/deploy-render@v1
        with:
          api_key: ${{ secrets.RENDER_API_KEY }}
          service_id: ${{ secrets.RENDER_SERVICE_ID }}
          # Esta acción le indica a Render que realice un nuevo despliegue.
          # Render luego usará la configuración de tu servicio (ej. Docker Image Path)
          # para jalar la imagen adecuada (probablemente 'latest' de Docker Hub si la configuraste así).